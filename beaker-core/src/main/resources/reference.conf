beaker {

  # A port number.
  port = 9090

  # A cache hierarchy.
  # Caches are accessed in the order that they appear in this list. ("local", "redis")
  caches = []

  # A database implementation.
  # Databases are the underlying source of consistency and durability. ("local", "sql")
  database = "local"

  cache {

    local {

      # An upper bound on the size of the cache in bytes.
      # Because the size of each cache entry is approximate, it is possible for the actual memory
      # utilization of a maximum capacity cache to differ slightly from this threshold.
      capacity = 20 MB

      # A duration after which an unused cache entry is automatically evicted.
      # Cache entries are evicted using the Window TinyLfu policy, which has been shown to produce
      # near optimal hit rates https://github.com/ben-manes/caffeine/wiki/Efficiency.
      expiration = 300 s

    }

    redis {

      # A hostname.
      host = "localhost"

      # A port number.
      port = 6379

    }

  }

  database {

    sql {

      # A username.
      username = "root"

      # A password.
      password = ""

      # A SQL dialect.
      # Currently supports mysql and postgresql.
      dialect = "mysql"

      # A JDBC connection url.
      url = "jdbc:mysql://localhost:3306/test?serverTimezone=UTC"

    }

  }

  registry {

    # A ZooKeeper connection string.
    # Connection strings are formed from the comma-delimited list of host:port locations for the
    # various ZooKeeper instances participating in the ensemble. For example, a connection string
    # might be "localhost:2181,locahost:3101".
    zookeeper = "localhost:2181"

    # A ZooKeeper path.
    # Namespaces correspond to the ZooKeeper directory in which server instances are registered. No
    # other process should alter the contents of this path.
    namespace = "/services/caustic"

    # A ZooKeeper connection timeout.
    # Connection timeouts correspond to the duration a ZooKeeper client is willing to wait to
    # establish a connection. The connection timeout must be less than or equal to the session
    # timeout.
    connectionTimeout = 15 s

    # A ZooKeeper session timeout.
    # Session timeouts correspond to the duration of disconnectivity after which ZooKeeper considers
    # a client to be expired. Clients must renegotiate a new session when their session expires. The
    # session timeout must exceed the connection timeout.
    sessionTimeout = 60 s

  }

}