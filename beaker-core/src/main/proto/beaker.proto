syntax = "proto3";
package beaker.core;

/**
 * A collection of keys.
 */
message Keys {
  repeated string list = 1;
}

/**
 * A versioned value. Revisions are uniquely-identified and totally-ordered by their version.
 */
message Revision {
  uint64 version = 1;
  string value = 2;
}

/**
 * A collection of revisions.
 */
message Revisions {
  map<string, Revision> entries = 1;
}

/**
 * A conditional update. Transactions depend on the versions of a set of keys, called its readset,
 * and change the revisions of a set of keys, called its writeset. Defaults to an empty transaction.
 */
message Transaction {
  map<string, uint64> depends = 1;
  map<string, Revision> changes = 2;
}

/**
 * A monotonically-increasing, globally-unique sequence number formed by concatenating a
 * locally-unique round number with a globally-unique identifier. Defaults to the zero ballot.
 */
message Ballot {
  uint32 round = 1;
  uint32 id = 2;
}

/**
 * A collection of non-conflicting transactions. These transactions may conditionally apply updates
 * or unconditionally repair stale revisions. Proposals are uniquely-identified and totally-ordered
 * by their ballot.
 */
message Proposal {
  Ballot ballot = 1;
  repeated Transaction applies = 2;
  Transaction repairs = 3;
}

/**
 * A response indicating whether or not a proposed transaction was committed.
 */
message Result {
  bool committed = 1;
}

/**
 * An empty response.
 */
message Void {

}

/**
 * A distributed, transactional key-value store.
 */
service BeakerService {

  /**
   * Returns the latest revision of each key.
   *
   * @param keys Keys to get.
   * @return Revision of each key.
   */
  rpc Get(Keys) returns (stream Revisions);

  /**
   * Returns the latest revisions of every key.
   *
   * @return Revisions of every key.
   */
  rpc Scan(Void) returns (stream Revisions);

  /**
   * Conditionally applies its changes if and only if it depends on the latest versions.
   *
   * @param depends Dependencies.
   * @param updates Updates to apply.
   * @return Whether or not the transaction was committed.
   */
  rpc Propose(Transaction) returns (Result);

  /**
   * Makes a promise not to accept any proposal that conflicts with the proposal it returns and has
   * a lower ballot than the proposal it receives. If a promise has been made to a newer proposal,
   * its ballot is returned. If older proposals have already been accepted, they are merged together
   * and returned. Otherwise, it returns the proposal it receives with the default ballot.
   *
   * @param proposal Proposal to prepare.
   * @return Promised proposal.
   */
  rpc Prepare(Proposal) returns (Proposal);

  /**
   * Requests a vote for a proposal. Beakers cast a vote for a proposal if and only if a promise has
   * not been made to a newer proposal.
   *
   * @param proposal Proposal to accept.
   */
  rpc Accept(Proposal) returns (Void);

  /**
   * Casts a vote for a proposal. Beakers commit the transactions and repairs of a proposal once a
   * quorum of beakers vote for it.
   *
   * @param proposal Proposal to learn.
   */
  rpc Learn(Proposal) returns (Void);

}